rs485         arduino
DE_RE pin  -   6
RO         -   4
DI         -   5

#include <SPI.h>
#include <Ethernet.h>
#include <SoftwareSerial.h>

#define RS485_RX 4
#define RS485_TX 5
#define RS485_CONTROL 6

SoftwareSerial rs485(RS485_RX, RS485_TX);

byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192, 168, 1, 155);
IPAddress server(192, 168, 1, 100);

EthernetClient client;

String incomingData = "";

void setup() {
  Serial.begin(9600);
  rs485.begin(9600);
  pinMode(RS485_CONTROL, OUTPUT);
  digitalWrite(RS485_CONTROL, LOW);
  Ethernet.begin(mac, ip);
  delay(1000);
  Serial.println("System ready...");
}

void loop() {
  while (rs485.available()) {
    char c = rs485.read();
    incomingData += c;

    if (incomingData.startsWith("|AA") && countPipes(incomingData) == 9 && incomingData.endsWith("|")) {
      Serial.print("Received RS485 Data: ");
      Serial.println(incomingData);

      String rfid = extractRFID(incomingData);
      if (rfid.length() > 0) {
        Serial.print("Extracted RFID: ");
        Serial.println(rfid);
        sendToServer(rfid);
      } else {
        Serial.println("Failed to extract RFID");
      }
      incomingData = "";
      while (rs485.available()) {
        rs485.read();
      }
    }
  }
}

int countPipes(String str) {
  int count = 0;
  for (int i = 0; i < str.length(); i++) {
    if (str.charAt(i) == '|') count++;
  }
  return count;
}

String extractRFID(String data) {
  int pos[9];
  int index = 0;
  for (int i = 0; i < data.length() && index < 9; i++) {
    if (data.charAt(i) == '|') {
      pos[index++] = i;
    }
  }

  if (index >= 8) {
    return data.substring(pos[6] + 1, pos[7]);
  } else {
    return "";
  }
}


void sendToServer(String rfid) {
  if (client.connect(server, 8000)) {
    Serial.println("Connected to server");
    String jsonData = "{\"rfid_value\":\"" + rfid + "\", \"esd_discharge\": true}";
    client.println("PUT /update-esd-value HTTP/1.1");
    client.println("Host: 192.168.1.100");
    client.println("Content-Type: application/json");
    client.print("Content-Length: ");
    client.println(jsonData.length());
    client.println("Connection: close");
    client.println();
    client.println(jsonData);

    while (client.connected()) {
      if (client.available()) {
        String line = client.readStringUntil('\n');
        Serial.println(line);
      }
    }

    client.stop();
    Serial.println("Disconnected from server");
  } else {
    Serial.println("Connection to server failed");
  }
}
