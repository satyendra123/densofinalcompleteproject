// working turnstile controller
#include <SPI.h>
#include <Ethernet.h>
#include <Wiegand.h>
#include <avr/wdt.h>

byte mac[] = { 0xDE, 0xAD, 0xDA, 0xEF, 0xFE, 0xAB };
IPAddress ip(192, 168, 1, 159);
IPAddress serverIp(192, 168, 1, 10);

const int RELAY_PIN = 9;

#define D0_PIN 2
#define D1_PIN 3
const unsigned long RFID_RESET_TIMEOUT = 5000;

EthernetClient client;
WIEGAND wg;

String lastRFID = "";
unsigned long lastRFIDTime = 0;

void setup() {
  Serial.begin(9600);
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, HIGH);
  wg.begin(D0_PIN, D1_PIN);
  Ethernet.begin(mac, ip);
  delay(1000);
  Serial.println("Ethernet initialized");
  wdt_enable(WDTO_8S);
}

void loop() {
  wdt_reset();

  if (wg.available()) {
    uint32_t cardCode = wg.getCode();
    String currentRFID = String(cardCode);
    Serial.println("Scanned RFID: " + currentRFID);

    if (currentRFID != lastRFID) {
      lastRFID = currentRFID;
      lastRFIDTime = millis();
      sendRFIDToServer(currentRFID);
    } else {
      Serial.println("Same RFID, not sending");
    }
  }

  if (lastRFID != "" && (millis() - lastRFIDTime >= RFID_RESET_TIMEOUT)) {
    Serial.println("Clearing lastRFID...");
    lastRFID = "";
  }
}

void sendRFIDToServer(String rfid) {
  Serial.println("Sending to server: " + rfid);

  if (client.connect(serverIp, 8000)) {
    String url = "GET /get-boom-value/" + rfid + " HTTP/1.1";
    client.println(url);
    client.println("Host: 192.168.1.10");
    client.println("Connection: close");
    client.println();

    unsigned long timeoutStart = millis();
    while (client.connected() && millis() - timeoutStart < 5000) {
      wdt_reset();

      if (client.available()) {
        String line = client.readStringUntil('\n');
        Serial.println("Received: " + line);
        if (line.indexOf("|OPENEN%") >= 0) {
          triggerGate();
        }
      }
    }

    client.stop();
  } else {
    Serial.println("Connection failed");
  }
}

void triggerGate() {
  Serial.println("Gate Triggered!");
  digitalWrite(RELAY_PIN, LOW);
  delay(500);
  digitalWrite(RELAY_PIN, HIGH);
  Serial.println("Gate closed.");
}
