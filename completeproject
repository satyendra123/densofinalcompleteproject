/* FOR REGISTRATION
#include <SPI.h>
#include <Ethernet.h>
#include <Wiegand.h>

byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0x01 };
IPAddress ip(192, 168, 1, 16);
IPAddress serverIp(192, 168, 1, 100);

#define D0_PIN 2
#define D1_PIN 3

WIEGAND wg;
EthernetClient client;

void setup() {
  Serial.begin(9600);
  Ethernet.begin(mac, ip);
  delay(1000);
  Serial.println("Ethernet started");
  Serial.print("IP: ");
  Serial.println(Ethernet.localIP());

  wg.begin(D0_PIN, D1_PIN);
}

void loop() {
  if (wg.available()) {
    uint32_t cardCode = wg.getCode();
    String currentRFID = String(cardCode);
    Serial.println("Scanned RFID: " + currentRFID);
    sendRFIDToServer(currentRFID);
    }
  }

void sendRFIDToServer(String rfid) {
  Serial.println("Sending RFID to server: " + rfid);

  if (client.connect(serverIp, 8000)) {
    String url = "/api/latest-rfid?rfid=" + rfid;

    client.println("GET " + url + " HTTP/1.1");
    client.println("Host: 192.168.1.100");
    client.println("Connection: close");
    client.println();
  } else {
    Serial.println("Connection to server failed");
  }

  delay(500);
  client.stop();
}



*/

// system-1 working which sends the esd passed and the rfid to the master controller
/*
#include <Wiegand.h>
#include <SoftwareSerial.h>

#define D0_PIN 2
#define D1_PIN 3
#define ESD_PIN 7
#define RS485_RX 4
#define RS485_TX 5
#define RS485_CONTROL 6

#define DEVICE_ID 0x01

SoftwareSerial rs485(RS485_RX, RS485_TX);
WIEGAND wg;

String lastRFID = "";
bool esdPassed = false;
unsigned long rfidTime = 0;
unsigned long esdWindow = 20000;

void setup() {
  Serial.begin(9600);
  rs485.begin(9600);

  pinMode(ESD_PIN, INPUT_PULLUP);
  pinMode(RS485_CONTROL, OUTPUT);
  digitalWrite(RS485_CONTROL, LOW);

  wg.begin(D0_PIN, D1_PIN);
  Serial.println("Wiegand + ESD + RS485 Ready");
}

void loop() {
  if (rs485.available()) {
    String received = rs485.readStringUntil('\n');
    Serial.print("Received over RS485: ");
    Serial.println(received);
  }

  if (wg.available()) {
    uint32_t cardCode = wg.getCode();
    lastRFID = String(cardCode);
    rfidTime = millis();
    Serial.println("RFID Scanned: " + lastRFID);
  }

  if (lastRFID != "" && millis() - rfidTime <= esdWindow) {
    if (digitalRead(ESD_PIN) == LOW && !esdPassed) {
      esdPassed = true;
      Serial.println("ESD Passed for RFID: " + lastRFID);

      delay(getStaticDelay(DEVICE_ID));

      sendToMaster(lastRFID);
      resetState();
    }
  }

  if (lastRFID != "" && millis() - rfidTime > esdWindow) {
    Serial.println("ESD Timeout for RFID: " + lastRFID);
    resetState();
  }
}

void sendToMaster(String rfid) {
  String message = "|AA||";

  if (DEVICE_ID < 10) message += "0";
  message += String(DEVICE_ID);

  message += "||PASS||";
  message += rfid;
  message += "||FF|";

  sendViaRS485(message);
}

void sendViaRS485(String data) {
  preTransmission();
  rs485.print(data);
  postTransmission();
  Serial.println("Sent RS485: " + data);
}

void preTransmission() {
  digitalWrite(RS485_CONTROL, HIGH);
  delayMicroseconds(10);
}

void postTransmission() {
  delay(10);
  digitalWrite(RS485_CONTROL, LOW);
}

void resetState() {
  lastRFID = "";
  esdPassed = false;
  rfidTime = 0;
}

int getStaticDelay(byte deviceId) {
  switch (deviceId) {
    case 0x01: return 50;
    case 0x02: return 100;
    case 0x03: return 150;
    case 0x04: return 200;
    case 0x05: return 250;
    case 0x06: return 300;
    default: return 100;
  }
}
*/
// working master arduino which receives the rfid data  
/*
#include <SPI.h>
#include <Ethernet.h>
#include <SoftwareSerial.h>

#define RS485_RX 4
#define RS485_TX 5
#define RS485_CONTROL 6

SoftwareSerial rs485(RS485_RX, RS485_TX);

byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192, 168, 1, 155);
IPAddress server(192, 168, 1, 100);

EthernetClient client;

String incomingData = "";

void setup() {
  Serial.begin(9600);
  rs485.begin(9600);
  pinMode(RS485_CONTROL, OUTPUT);
  digitalWrite(RS485_CONTROL, LOW);  // Receive mode
  Ethernet.begin(mac, ip);
  delay(1000);
  Serial.println("System ready...");
}

void loop() {
  while (rs485.available()) {
    char c = rs485.read();
    incomingData += c;

    // If we reached the last '|', attempt to process
    if (incomingData.startsWith("|AA") && countPipes(incomingData) == 9 && incomingData.endsWith("|")) {
      Serial.print("Received RS485 Data: ");
      Serial.println(incomingData);

      String rfid = extractRFID(incomingData);
      if (rfid.length() > 0) {
        Serial.print("Extracted RFID: ");
        Serial.println(rfid);
        sendToServer(rfid);
      } else {
        Serial.println("Failed to extract RFID");
      }

      // Reset buffer
      incomingData = "";

      // Clear any remaining data in RS485 buffer
      while (rs485.available()) {
        rs485.read(); // discard
      }
    }
  }
}


int countPipes(String str) {
  int count = 0;
  for (int i = 0; i < str.length(); i++) {
    if (str.charAt(i) == '|') count++;
  }
  return count;
}

// Extracts the fourth field (RFID) using indexOf
String extractRFID(String data) {
  int pos[9];
  int index = 0;
  for (int i = 0; i < data.length() && index < 9; i++) {
    if (data.charAt(i) == '|') {
      pos[index++] = i;
    }
  }

  if (index >= 8) {
    // RFID is between 6th and 7th pipe
    return data.substring(pos[6] + 1, pos[7]);
  } else {
    return "";
  }
}


void sendToServer(String rfid) {
  if (client.connect(server, 8000)) {
    Serial.println("Connected to server...");
    String url = "GET /rfid-esd?rfid=" + rfid + " HTTP/1.1";
    client.println(url);
    client.println("Host: 192.168.1.100");
    client.println("Connection: close");
    client.println();
    
    delay(100);
    while (client.available()) {
      Serial.write(client.read());
    }

    client.stop();
    Serial.println("\nData sent, connection closed");
  } else {
    Serial.println("Failed to connect to server.");
  }
}
*/

    
// working turnstile controller
/*
#include <SPI.h>
#include <Ethernet.h>
#include <Wiegand.h>

byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0x01 };
IPAddress ip(192, 168, 1, 16);
IPAddress serverIp(192, 168, 1, 100);

const int RELAY_PIN = 9;

#define D0_PIN 2
#define D1_PIN 3
const unsigned long RFID_RESET_TIMEOUT = 5000;

EthernetClient client;
WIEGAND wg;

String lastRFID = "";
unsigned long lastRFIDTime = 0;

void setup() {
  Serial.begin(9600);

  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, HIGH);

  Ethernet.begin(mac, ip);
  delay(1000);
  Serial.println("Ethernet initialized");
  wg.begin(D0_PIN, D1_PIN);
}

void loop() {

  if (wg.available()) {
    uint32_t cardCode = wg.getCode();
    String currentRFID = String(cardCode);
    Serial.println("Scanned RFID: " + currentRFID);

    if (currentRFID != lastRFID) {
      lastRFID = currentRFID;
      lastRFIDTime = millis();
      sendRFIDToServer(currentRFID);
    } else {
      Serial.println("Same RFID, not sending");
    }
  }

  if (lastRFID != "" && (millis() - lastRFIDTime >= RFID_RESET_TIMEOUT)) {
    Serial.println("Clearing lastRFID...");
    lastRFID = "";
  }
}

void sendRFIDToServer(String rfid) {
  Serial.println("Sending to server: " + rfid);

  if (client.connect(serverIp, 8000)) {
    String url = "GET /rfid?rfid=" + rfid + " HTTP/1.1";
    client.println(url);
    client.println("Host: 192.168.1.100");
    client.println("Connection: close");
    client.println();

    while (client.connected()) {
      if (client.available()) {
        String line = client.readStringUntil('\n');
        Serial.println("Server Response: " + line);

        if (line.indexOf("|OPENEN%") >= 0) {
          triggerGate();
        }
      }
    }

    client.stop();
  } else {
    Serial.println("Connection failed");
  }
}

void triggerGate() {
  Serial.println("Gate Triggered!");
  digitalWrite(RELAY_PIN, LOW);
  delay(500);
  digitalWrite(RELAY_PIN, HIGH);
  Serial.println("Gate closed.");
}
*/
