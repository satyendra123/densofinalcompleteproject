#include <SPI.h>
#include <Ethernet.h>
#include <Wiegand.h>
#include <SPIFFS.h>

byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0x01 };
IPAddress ip(192, 168, 1, 16);
IPAddress serverIp(192, 168, 1, 100);
const int serverPort = 8000;

const int ENTRY_RELAY_PIN = 9;
const int EXIT_RELAY_PIN = 10;

//Entry rfid
#define ENTRY_D0_PIN 2
#define ENTRY_D1_PIN 3
//Exit rfid
#define EXIT_D0_PIN 4
#define EXIT_D1_PIN 5

const unsigned long RFID_RESET_TIMEOUT = 5000;

#define SPIFFS_FILE_ENTRY "/entry_rfids.txt"
#define SPIFFS_FILE_EXIT "/exit_rfids.txt"
#define MAX_RFID_LENGTH 15

EthernetClient client;
WIEGAND entryWg;
WIEGAND exitWg;

String lastEntryRFID = "";
unsigned long lastEntryRFIDTime = 0;
String lastExitRFID = "";
unsigned long lastExitRFIDTime = 0;

// Function prototypes
void setup();
void loop();
void processEntryRFID(String rfid);
void processExitRFID(String rfid);
void sendRFIDToServer(String rfid, bool isEntry);
void triggerGate(int relayPin);
bool isRFIDAuthorized(String rfid, const char* filename);
void addRFIDToFile(String rfid, const char* filename);
void removeRFIDFromFile(String rfid, const char* filename);
void clearFile(const char* filename);

void setup() {
  Serial.begin(9600);

  pinMode(ENTRY_RELAY_PIN, OUTPUT);
  digitalWrite(ENTRY_RELAY_PIN, HIGH);
  pinMode(EXIT_RELAY_PIN, OUTPUT);
  digitalWrite(EXIT_RELAY_PIN, HIGH);
  Ethernet.begin(mac, ip);
  delay(1000);
  Serial.println("Ethernet initialized");

  entryWg.begin(ENTRY_D0_PIN, ENTRY_D1_PIN);
  exitWg.begin(EXIT_D0_PIN, EXIT_D1_PIN);

  if (!SPIFFS.begin(true)) {
    Serial.println("An Error has occurred while mounting SPIFFS");
    while(true);
  }
  Serial.println("SPIFFS initialized");
}

void loop() {
  if (entryWg.available()) {
    uint32_t cardCode = entryWg.getCode();
    String currentRFID = String(cardCode);
    Serial.println("Entry RFID Scanned: " + currentRFID);
    processEntryRFID(currentRFID);
  }

  if (exitWg.available()) {
    uint32_t cardCode = exitWg.getCode();
    String currentRFID = String(cardCode);
    Serial.println("Exit RFID Scanned: " + currentRFID);
    processExitRFID(currentRFID);
  }

  if (lastEntryRFID != "" && (millis() - lastEntryRFIDTime >= RFID_RESET_TIMEOUT)) {
    Serial.println("Clearing lastEntryRFID...");
    lastEntryRFID = "";
  }

  if (lastExitRFID != "" && (millis() - lastExitRFIDTime >= RFID_RESET_TIMEOUT)) {
    Serial.println("Clearing lastExitRFID...");
    lastExitRFID = "";
  }
}

void processEntryRFID(String rfid) {
  if (rfid != lastEntryRFID) {
    lastEntryRFID = rfid;
    lastEntryRFIDTime = millis();

    if (isRFIDAuthorized(rfid, SPIFFS_FILE_ENTRY)) {
      Serial.println("Entry RFID Authorized (Offline)");
      triggerGate(ENTRY_RELAY_PIN);
    } else {
      Serial.println("Entry RFID Not Authorized (Offline), Checking Server...");
      sendRFIDToServer(rfid, true); // true for entry
    }
  } else {
    Serial.println("Same Entry RFID, not processing");
  }
}

void processExitRFID(String rfid) {
  if (rfid != lastExitRFID) {
    lastExitRFID = rfid;
    lastExitRFIDTime = millis();

    if (isRFIDAuthorized(rfid, SPIFFS_FILE_EXIT)) {
      Serial.println("Exit RFID Authorized (Offline)");
      triggerGate(EXIT_RELAY_PIN);
    } else {
      Serial.println("Exit RFID Not Authorized (Offline), Checking Server...");
      sendRFIDToServer(rfid, false); // false for exit
    }
  } else {
    Serial.println("Same Exit RFID, not processing");
  }
}


void sendRFIDToServer(String rfid, bool isEntry) {
  Serial.println("Sending to server: " + rfid + (isEntry ? " (Entry)" : " (Exit)"));

  if (client.connect(serverIp, serverPort)) {
    String url = "GET /get-boom-value/" + rfid + "/" + (isEntry ? "entry" : "exit") + " HTTP/1.1";
    client.println(url);
    client.println("Host: " + String(serverIp[0]) + "." + String(serverIp[1]) + "." + String(serverIp[2]) + "." + String(serverIp[3]));
    client.println("Connection: close");
    client.println();

    while (client.connected()) {
      if (client.available()) {
        String line = client.readStringUntil('\n');
        Serial.println(line);
        if (line.indexOf("|OPENEN%") >= 0) {
          Serial.println("Server authorized RFID");
          triggerGate(isEntry ? ENTRY_RELAY_PIN : EXIT_RELAY_PIN);
          addRFIDToFile(rfid, isEntry ? SPIFFS_FILE_ENTRY : SPIFFS_FILE_EXIT); // Add to SPIFFS
        } else if (line.indexOf("|DENIED%") >= 0) {
          Serial.println("Server denied RFID");
        }
      }
    }

    client.stop();
  } else {
    Serial.println("Connection failed");
  }
}

void triggerGate(int relayPin) {
  Serial.print("Gate Triggered! (Relay Pin: ");
  Serial.print(relayPin);
  Serial.println(")");
  digitalWrite(relayPin, LOW);
  delay(500);
  digitalWrite(relayPin, HIGH);
  Serial.println("Gate closed.");
}

bool isRFIDAuthorized(String rfid, const char* filename) {
  File file = SPIFFS.open(filename, "r");
  if (!file) {
    Serial.print("Failed to open file for reading: ");
    Serial.println(filename);
    return false;
  }

  while (file.available()) {
    String storedRFID = file.readStringUntil('\n');
    storedRFID.trim();
    if (rfid == storedRFID) {
      file.close();
      return true;
    }
  }
  file.close();
  return false;
}

void addRFIDToFile(String rfid, const char* filename) {
  File file = SPIFFS.open(filename, "a+"); // Open for appending
  if (!file) {
    Serial.print("Failed to open file for appending: ");
    Serial.println(filename);
    return;
  }

  file.println(rfid); // Add RFID to the file
  file.close();
  Serial.print("RFID added to file: ");
  Serial.println(filename);
}

void removeRFIDFromFile(String rfid, const char* filename) {
  String tempFileContent = "";

  File file = SPIFFS.open(filename, "r");
  if (!file) {
    Serial.print("Failed to open file for reading: ");
    Serial.println(filename);
    return;
  }

  while (file.available()) {
    String storedRFID = file.readStringUntil('\n');
    storedRFID.trim();
    if (storedRFID != rfid) {
      tempFileContent += storedRFID + "\n";
    }
  }
  file.close();

  File fileToWrite = SPIFFS.open(filename, "w");
  if (!fileToWrite) {
    Serial.print("Failed to open file for writing: ");
    Serial.println(filename);
    return;
  }
  fileToWrite.print(tempFileContent);
  fileToWrite.close();
  Serial.print("RFID removed from file: ");
  Serial.println(filename);
}

void clearFile(const char* filename) {
  File file = SPIFFS.open(filename, "w");
  if (!file) {
    Serial.print("Failed to open file for clearing: ");
    Serial.println(filename);
    return;
  }
  file.close();
  Serial.print("File cleared: ");
  Serial.println(filename);
}
