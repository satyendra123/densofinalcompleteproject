//slave code
// slave-1 working for testing
/*
#include <SoftwareSerial.h>
#include <Wiegand.h>

// Pin Definitions
#define D0_PIN     2
#define D1_PIN     3
#define RS485_RX   11
#define RS485_TX   10
#define ESD_PIN    7
#define DEVICE_ID  1

SoftwareSerial Soft_Serial(RS485_RX, RS485_TX);
WIEGAND wg;

bool esdPassed = false;
unsigned long rfidTime = 0;
const unsigned long esdWindow = 20000;
String lastRFID = "";

unsigned long lastSimTime = 0;
const unsigned long simulateEvery = 5000;

void setup() {
  Serial.begin(115200);
  Soft_Serial.begin(9600);

  pinMode(ESD_PIN, INPUT_PULLUP);
  wg.begin(D0_PIN, D1_PIN);

  Serial.println("Wiegand + ESD + RS485 Ready");
}

void loop() {

  if (millis() - lastSimTime > simulateEvery && lastRFID == "") {
    lastSimTime = millis();
    lastRFID = "1234561";
    rfidTime = millis();
    Serial.println("Simulated RFID Scanned: " + lastRFID);
  }

  if (lastRFID != "" && millis() - rfidTime <= esdWindow) {
    if (digitalRead(ESD_PIN) == LOW && !esdPassed) {
      esdPassed = true;
      Serial.println("ESD Passed for RFID: " + lastRFID);

      delay(getStaticDelay(DEVICE_ID));
      sendToMaster(lastRFID);
      resetState();
    }
  }

  if (lastRFID != "" && millis() - rfidTime > esdWindow) {
    Serial.println("ESD Timeout for RFID: " + lastRFID);
    resetState();
  }

  delay(10);
}

void sendToMaster(const String& rfid) {
  String message = "|AA||";

  if (DEVICE_ID < 10) message += "0";
  message += String(DEVICE_ID);

  message += "||PASS||" + rfid + "||FF|";

  Serial.println("Sending: " + message);
  Soft_Serial.print(message);
}

void resetState() {
  lastRFID = "";
  esdPassed = false;
  rfidTime = 0;
}

int getStaticDelay(byte deviceId) {
  switch (deviceId) {
    case 0x01: return 50;
    case 0x02: return 100;
    case 0x03: return 150;
    case 0x04: return 200;
    case 0x05: return 250;
    case 0x06: return 300;
    default:   return 100;
  }
}
*/
// master code. it receives the data from the 6 controller
/*
#include <SoftwareSerial.h>

#define RX_PIN 11
#define TX_PIN 10
#define LED_PIN 13

SoftwareSerial Soft_Serial(RX_PIN, TX_PIN);

String incomingData = "";

void setup() {
  Serial.begin(115200);
  Soft_Serial.begin(9600);

  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);

  Serial.println("\n\nMaster Ready");
}

void loop() {
  while (Soft_Serial.available()) {
    char receivedChar = Soft_Serial.read();
    incomingData += receivedChar;

    // Check for end delimiter
    if (receivedChar == '|') {
      if (incomingData.endsWith("||FF|")) {
        Serial.println("\n--- Full Message Received ---");
        Serial.println("Raw: " + incomingData);
        parseMessage(incomingData);
        incomingData = "";
      }
    }

    // Prevent garbage buildup
    if (incomingData.length() > 100) {
      incomingData = "";
    }
  }
}

void parseMessage(String msg) {
  // Expected format: |AA||01||PASS||1234561||FF|
  // Split message based on delimiter "||"
  int partIndex = 0;
  String parts[6];

  int fromIndex = 0;
  while (fromIndex < msg.length() && partIndex < 6) {
    int start = msg.indexOf("||", fromIndex);
    if (start == -1) break;

    int end = msg.indexOf("||", start + 2);
    if (end == -1) end = msg.indexOf("||", start + 2); // try again

    parts[partIndex++] = msg.substring(fromIndex, start);
    fromIndex = start + 2;
  }

  // Extract useful info (fallback if parsing is inconsistent)
  if (msg.indexOf("PASS") != -1) {
    int idStart = msg.indexOf("||") + 2;
    int idEnd = msg.indexOf("||", idStart);
    String deviceId = msg.substring(idStart, idEnd);

    int rfidStart = msg.indexOf("||PASS||") + 8;
    int rfidEnd = msg.indexOf("||", rfidStart);
    String rfid = msg.substring(rfidStart, rfidEnd);

    Serial.println("Device ID: " + deviceId);
    Serial.println("RFID: " + rfid);

    // Example action: Turn on LED briefly
    digitalWrite(LED_PIN, HIGH);
    delay(300);
    digitalWrite(LED_PIN, LOW);
  } else {
    Serial.println("Invalid/Unrecognized message.");
  }
}
*/
